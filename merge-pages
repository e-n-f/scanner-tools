#!/usr/bin/perl

use strict;

my $rev = 0;
if ($ARGV[0] eq "-r") {
	$rev = 1;
	shift @ARGV;
}

die if $#ARGV <= 0;

my $out = "$ARGV[0].merged.pdf";
$out =~ s/\.pdf\.merged/.merged/;

my $cmd = "pdfunite ";

if ($rev) {
	for (my $i = $#ARGV; $i >= 0; $i--) {
		my $q = $ARGV[$i];
		$q =~ s/'/'"'"'/g;
		$cmd .= "'$q' ";
	}
} else {
	for (my $i = 0; $i <= $#ARGV; $i++) {
		my $q = $ARGV[$i];
		$q =~ s/'/'"'"'/g;
		$cmd .= "'$q' ";
	}
}

$out =~ s/'/'"'"'/g;
$cmd .= "'$out'";

print STDERR "Writing $out\n";
system "$cmd";

exit 0;

my @page_files = ();

for my $file (@ARGV) {
	my $q = $file;
	$q =~ s/'/'"'"'/g;

	open(IN, "pdfimages -list '$q' |");
	while (<IN>) {
		if (/^ *[0-9]/) {
			push @page_files, $file;
		}
	}
	close(IN);
}

mkdir "/tmp/$$";

my $seq = 0;
for my $file (@ARGV) {
	print STDERR "Extracting images: $file to /tmp/$$\n";
	my $q = $file;
	$q =~ s/'/'"'"'/g;

	my $pad = sprintf("%04d", $seq++);
	system "pdfimages -j '$q' /tmp/$$/im-$pad";
}

my @tmps = sort(</tmp/$$/im-*>);

if ($#tmps != $#page_files) {
	die "Got $#tmps images in /tmp/$$ instead of expected $#page_files";
}

my $n = $#page_files + 1;
my $list = "";

# XXX figure out PNG resolution

for (my $i = 0; $i < $n; $i++) {
	$list .= "$tmps[$i] ";
}

$ARGV[0] =~ s/\.pdf$//;
my $q = "$ARGV[0].merge.pdf";
print STDERR "Writing $q\n";
$q =~ s/'/'"'"'/g;

system "img2pdf -o '$q' $list";

for my $t (@tmps) {
	unlink $t || die "unlink $t";
}

rmdir "/tmp/$$" || die "rmdir /tmp/$$";
